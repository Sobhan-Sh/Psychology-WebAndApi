// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Context.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231130065155_inite_psychologistDb")]
    partial class inite_psychologistDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.DiscountAndOrder.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountWithMoney")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountWithPercentage")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PatientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PsychologistId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("Entity.DiscountAndOrder.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientTurnId")
                        .HasColumnType("int");

                    b.Property<int>("PayAmount")
                        .HasColumnType("int");

                    b.Property<int?>("PsychologistId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("RefId")
                        .HasColumnType("int");

                    b.Property<int?>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientTurnId");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("TestId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Entity.Patient.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Entity.Patient.PatientExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("TestId");

                    b.ToTable("PatientExams");
                });

            modelBuilder.Entity("Entity.Patient.PatientFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFiles");
                });

            modelBuilder.Entity("Entity.Patient.PatientResponses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PathFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientExamId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientExamId");

                    b.ToTable("PatientResponsesExamies");
                });

            modelBuilder.Entity("Entity.Patient.PatientTurn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ConsultationDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCanseled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("PsychologistWorkingDateAndTimeId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfConsultationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("PsychologistWorkingDateAndTimeId");

                    b.HasIndex("TypeOfConsultationId");

                    b.ToTable("PatientTurn");
                });

            modelBuilder.Entity("Entity.Psychologist.Psychologist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Commission")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvidencePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalLicennseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Psychologists");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingDateAndTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PsychologistId")
                        .HasColumnType("int");

                    b.Property<int>("PsychologistWorkingDaysId")
                        .HasColumnType("int");

                    b.Property<int>("PsychologistWorkingHoursId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PsychologistId");

                    b.HasIndex("PsychologistWorkingDaysId");

                    b.HasIndex("PsychologistWorkingHoursId");

                    b.ToTable("PsychologistWorkingDateAndTime");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PsychologistWorkingDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2293),
                            Day = "شنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2295),
                            Day = "یکشنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2297),
                            Day = "دوشنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2298),
                            Day = "سه شنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2299),
                            Day = "چهار شنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2301),
                            Day = "پنج شنبه",
                            IsActive = true,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2302),
                            Day = "جمعه",
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PsychologistWorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2150)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 30, 1, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2155)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 30, 2, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2158)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 30, 3, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2161)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 11, 30, 4, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2164)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 11, 30, 5, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2170)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 11, 30, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2173)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 11, 30, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 11, 30, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2179)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 11, 30, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2183)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2186)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 11, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2188)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 11, 30, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2192)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 11, 30, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2194)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 11, 30, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2209)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 11, 30, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2212)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 11, 30, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2215)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 11, 30, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2218)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 11, 30, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2221)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 11, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2224)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 11, 30, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2227)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 11, 30, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2230)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 11, 30, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2233)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 11, 30, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            StartTime = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(2236)
                        });
                });

            modelBuilder.Entity("Entity.Psychologist.TypeOfConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TypeOfConsultation");
                });

            modelBuilder.Entity("Entity.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7932),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "AdminManagment"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7940),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7942),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Patient"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7943),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Psychologist"
                        });
                });

            modelBuilder.Entity("Entity.Test.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Entity.Test.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Entity.Test.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Entity.User.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7978),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "آقا"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7981),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "خانم"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 366, DateTimeKind.Local).AddTicks(7982),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "دیگر"
                        });
                });

            modelBuilder.Entity("Entity.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MobailActiveStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivationCode = "0183c2c5-05a9-4351-a875-bacff1a0dfa7",
                            CreatedAt = new DateTime(2023, 11, 30, 10, 21, 55, 368, DateTimeKind.Local).AddTicks(1990),
                            FName = "مدیر",
                            GenderId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            LName = "سیستم",
                            MobailActiveStatus = true,
                            Password = "AQAAAAEAACcQAAAAECmoZoKT+7jrDg6Ks/7XSipx7LF3oW0Brkd8sKtOctVFaZImXR+1yFibZpi+5LvvaQ==",
                            Phone = "Administrator@1402",
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("Entity.DiscountAndOrder.Discount", b =>
                {
                    b.HasOne("Entity.Patient.Patient", "Patient")
                        .WithMany("Discount")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Psychologist.Psychologist", "Psychologist")
                        .WithMany("Discount")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("Entity.DiscountAndOrder.Order", b =>
                {
                    b.HasOne("Entity.Patient.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Patient.PatientTurn", "PatientTurn")
                        .WithMany("Order")
                        .HasForeignKey("PatientTurnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Entity.Psychologist.Psychologist", "Psychologist")
                        .WithMany("Order")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Test.Test", "Test")
                        .WithMany("Orders")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Patient");

                    b.Navigation("PatientTurn");

                    b.Navigation("Psychologist");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Entity.Patient.Patient", b =>
                {
                    b.HasOne("Entity.User.User", "User")
                        .WithMany("Patient")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Patient.PatientExam", b =>
                {
                    b.HasOne("Entity.Patient.Patient", "Patient")
                        .WithMany("PatientExam")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Test.Test", "Test")
                        .WithMany("PatientExam")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Entity.Patient.PatientFile", b =>
                {
                    b.HasOne("Entity.Patient.Patient", "Patient")
                        .WithMany("PatientFile")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Entity.Patient.PatientResponses", b =>
                {
                    b.HasOne("Entity.Patient.PatientExam", "PatientExam")
                        .WithMany("PatientResponses")
                        .HasForeignKey("PatientExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PatientExam");
                });

            modelBuilder.Entity("Entity.Patient.PatientTurn", b =>
                {
                    b.HasOne("Entity.Patient.Patient", "Patient")
                        .WithMany("PatientTurns")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Psychologist.PsychologistWorkingDateAndTime", "PsychologistWorkingDateAndTime")
                        .WithMany("PatientTurns")
                        .HasForeignKey("PsychologistWorkingDateAndTimeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Psychologist.TypeOfConsultation", "TypeOfConsultation")
                        .WithMany("PatientTurns")
                        .HasForeignKey("TypeOfConsultationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PsychologistWorkingDateAndTime");

                    b.Navigation("TypeOfConsultation");
                });

            modelBuilder.Entity("Entity.Psychologist.Psychologist", b =>
                {
                    b.HasOne("Entity.User.User", "User")
                        .WithMany("Psychologists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingDateAndTime", b =>
                {
                    b.HasOne("Entity.Psychologist.Psychologist", "Psychologist")
                        .WithMany("PsychologistWorkingDateAndTime")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Psychologist.PsychologistWorkingDays", "PsychologistWorkingDays")
                        .WithMany("PsychologistWorkingDateAndTimes")
                        .HasForeignKey("PsychologistWorkingDaysId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Psychologist.PsychologistWorkingHours", "PsychologistWorkingHours")
                        .WithMany("PsychologistWorkingDateAndTimes")
                        .HasForeignKey("PsychologistWorkingHoursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Psychologist");

                    b.Navigation("PsychologistWorkingDays");

                    b.Navigation("PsychologistWorkingHours");
                });

            modelBuilder.Entity("Entity.Test.Answer", b =>
                {
                    b.HasOne("Entity.Test.Question", "Question")
                        .WithMany("Answer")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entity.Test.Question", b =>
                {
                    b.HasOne("Entity.Test.Test", "Test")
                        .WithMany("Question")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Entity.User.User", b =>
                {
                    b.HasOne("Entity.User.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Role.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entity.Patient.Patient", b =>
                {
                    b.Navigation("Discount");

                    b.Navigation("Orders");

                    b.Navigation("PatientExam");

                    b.Navigation("PatientFile");

                    b.Navigation("PatientTurns");
                });

            modelBuilder.Entity("Entity.Patient.PatientExam", b =>
                {
                    b.Navigation("PatientResponses");
                });

            modelBuilder.Entity("Entity.Patient.PatientTurn", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entity.Psychologist.Psychologist", b =>
                {
                    b.Navigation("Discount");

                    b.Navigation("Order");

                    b.Navigation("PsychologistWorkingDateAndTime");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingDateAndTime", b =>
                {
                    b.Navigation("PatientTurns");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingDays", b =>
                {
                    b.Navigation("PsychologistWorkingDateAndTimes");
                });

            modelBuilder.Entity("Entity.Psychologist.PsychologistWorkingHours", b =>
                {
                    b.Navigation("PsychologistWorkingDateAndTimes");
                });

            modelBuilder.Entity("Entity.Psychologist.TypeOfConsultation", b =>
                {
                    b.Navigation("PatientTurns");
                });

            modelBuilder.Entity("Entity.Role.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.Test.Question", b =>
                {
                    b.Navigation("Answer");
                });

            modelBuilder.Entity("Entity.Test.Test", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PatientExam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Entity.User.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entity.User.User", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("Psychologists");
                });
#pragma warning restore 612, 618
        }
    }
}
